/*
 *----------------------------------------------------------------------
 *    T-Kernel 2.0 Software Package
 *
 *    Copyright 2011 by Ken Sakamura.
 *    This software is distributed under the T-License 2.0.
 *----------------------------------------------------------------------
 *
 *    Released by T-Engine Forum(http://www.t-engine.org/) at 2011/05/17.
 *
 *----------------------------------------------------------------------
 *    Changes: Adapted to the ASP-SH7750R Board.
 *    Changed by UC Technology at 2013/01/29.
 *    
 *    UCT T-Kernel 2.0 DevKit tuned for SH7750R Version 2.00.01
 *    Copyright (c) 2013 UC Technology. All Rights Reserved.
 *----------------------------------------------------------------------
 */

/*
 *	@(#)int.c (libtk/SH7750R)
 *
 *	Interrupt controller  
 */

#include <basic.h>
#include <tk/syslib.h>
#include <tk/sysdef.h>

/*
 * Kernel configuration file
 */
#include "../../../../../config/tk_config_func.h"

#include <smachine.h>

typedef struct {
	INTVEC	vec:16;
	INT	shift:16;
	INT	port;
} INTCTBL;

LOCAL INTCTBL intctbl[] = {
	{ IV_TMU0,	12, IPRA },
	{ IV_TMU1,	 8, IPRA },
	{ IV_TMU2,	 4, IPRA },
	{ IV_RTC,	 0, IPRA },

	{ IV_WDT,	12, IPRB },
	{ IV_REF,	 8, IPRB },
	{ IV_SCI,	 4, IPRB },

	{ IV_GPIO,	12, IPRC },
	{ IV_DMAC,	 8, IPRC },
	{ IV_SCIF,	 4, IPRC },
	{ IV_HUDI,	 0, IPRC },

//	{ IV_IRL0,	12, IPRD },
//	{ IV_IRL1,	 8, IPRD },
//	{ IV_IRL2,	 4, IPRD },
//	{ IV_IRL3,	 0, IPRD },

//	{ IV_TMU3,	 8, INTPRI00 },
//	{ IV_TMU4,	12, INTPRI00 },

	{ 0 }
};

/*
 * Interrupt disable/enable
 */
#pragma inline(_disint)
static UINT _disint( void )
{
	UINT	imask, imask2;

	imask = imask2 = get_cr();
	imask2 |= (15 << 4);
	set_cr(imask2);

	return imask;
}
#pragma inline(_enaint)
static void _enaint( UINT imask )
{
	set_cr(imask | SR_FD);
}

#define _DI(imask)	( imask = _disint() )
#define _EI(imask)	( _enaint(imask) )

#if defined(USE_FUNC_ENABLEINT)
/*
 * Enable interrupt
 *	Enable the interrupt specified by 'intvec' by setting priority
 *	level to 'level'. '1'-'15' is valid for 'level' and '15' is the
 *	highest priority. If 'level' is invalid value, operation is not
 *	guaranteed.
 *	INTMSK00 register is not changed automatically, so it must be set
 *	if necessary.
 */
EXPORT void EnableInt( INTVEC intvec, INT level )
{
	INTCTBL	*tbl;
	UINT	msk, imask;

	for ( tbl = intctbl; tbl->vec != 0; tbl++ ) {
		if ( tbl->vec != intvec ) {
			continue;
		}

		msk = ~(0x0000000fU << tbl->shift);
		level <<= tbl->shift;

		_DI(imask);
		if ( tbl->port >= IPRA ) {
			out_h(tbl->port, (in_h(tbl->port) & msk) | level);
		} else {
			out_w(tbl->port, (in_w(tbl->port) & msk) | level);
		}
		_EI(imask);

		break;
	}
}
#endif /* USE_FUNC_ENABLEINT */

#if defined(USE_FUNC_DISABLEINT)
/* Disable interrupt
 *	Disable the interrupt specified by 'intvec' by setting its priority
 *	level to '0'. INTMSK00 register is not changed automatically, so it
 *	must be set if necessary.
 */
EXPORT void DisableInt( INTVEC intvec )
{
	EnableInt(intvec, 0);
}
#endif /* USE_FUNC_DISABLEINT */
