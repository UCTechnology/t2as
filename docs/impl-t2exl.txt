/*
 *----------------------------------------------------------------------
 *    T2EX Software Package
 *
 *    Copyright 2012 by Ken Sakamura.
 *    This software is distributed under the T-License 2.0.
 *----------------------------------------------------------------------
 *
 *    Released by T-Engine Forum(http://www.t-engine.org/) at 2012/12/12.
 *
 *----------------------------------------------------------------------
 */

==============================================================================
      T2AS (T-Kernel 2.0 AeroSpace) ( ASP-LEON5 )用 T2EX実装仕様書
==============================================================================

------------------------------------------------------------------------------
1. 概要
------------------------------------------------------------------------------

本書は、LEON-XCKU (CPU LEON5) (以降、ASP-LEON5と記述)上で操作する、
T-Kernel 2.0 Extension (T2EX) の実装に関する設定やリソースに関する詳細や制限事項
を記述した仕様書である。


------------------------------------------------------------------------------
2. T-Kernel 2.0 Extension (T2EX) リファレンス実装との差分
------------------------------------------------------------------------------

      ASP-LEON5 用 T2EX は T-Kernel 2.0 Extension (T2EX) Ver 2.00.00 のリファレ
      ンス実装をベースとし ASP-LEON5 用 T2AS に合わせて一部修正を加えている。

      具体的には、以下の点について T2EX リファレンス実装に対する変更が行われて
      いる。

        - 定義ファイル (${BD}/include/device/clk.h)
                T2EX カレンダ機能を使用するために clk.h が必要になるため、
                T-Kernel 2.02.00からファイルをコピー。

        - CPU依存部 (${BD}/kernel/sysdepend/cpu/leon5/cpu_conf.h)
                ASP-LEON5 用 T2AS は MMU に未対応のため、USE_MMU を0に変更。

        - システム初期化 (${BD}/kernel/sysinit/src/gdevcnf.c)
                LAN ドライバのデバイス構成情報に、レジスタのベースアドレスとして
                符号なし 32bit が含まれるため、GetDevConf 関数の strtol を 
                strtoul に変更。

        - システムマネージャ (${BD}/kernel/sysmgr/src/imalloc.c)
                ASP-LEON5 用 T2AS の変更点をマージ。

        - 機能拡張 (${BD}/tkse/extension/common/src)
                T2EX の libc は未対応のため、libc と重複するためにビルドから外さ
                れる ffs.c strchr.c strcasecmp.c div.c abs.c の 5 つのファイルを
                ビルド対象に含める。

        - T2EXファイル管理機能 (${BD}/t2ex/fs)
                未対応のため、SVC のエントリ関数は E_NOSPT を返すように変更。

        - T2EXネットワーク通信機能 (${BD}/t2ex/fs)
                詳細については第5節に示す。

        - T2EXプログラムロード機能 (${BD}/t2ex/load)
                startup.S は、何もせずに終了。
                未対応のため、SVC のエントリ関数は E_NOSPT を返すように変更。

        - 標準C互換ライブラリ (${BD}/t2ex/lib/libc)
                標準C互換ライブラリはコンパイラ付属のものを使用するため、T2EX 
                の標準C互換ライブラリは使用しない。
                但し、arpa/inet.h で定義される関数は、T2EXネットワーク通信機能、
                及びT2EXネットワーク通信機能を使用するアプリケーションで使用する
                ものなので、T2EXネットワーク通信機能に組み込み使用できるようにす
                る。

        - T-Kernelライブラリ(差分) (${BD}/t2ex/lib/libtk)
                T2AS の T-Kernelライブラリを使用するため、T-Kernelライブラリ
                (差分)は使用しない。


------------------------------------------------------------------------------
3. メモリ保護機能
------------------------------------------------------------------------------

      メモリ管理機能はT2ASのものを使用する。
      T2EXのメモリ管理機能は利用しないため、機種依存部のフォルダは空とする。

              kernel/extension/memory/t2ex/sysdepend/leon5


------------------------------------------------------------------------------
4. ファイル管理機能
------------------------------------------------------------------------------

      T2EXのファイル管理機能には非対応である。
      ファイル管理機能の API コールを呼び出した場合は、E_NOSPT を返す。


------------------------------------------------------------------------------
5. ネットワーク通信機能
------------------------------------------------------------------------------

5.1 LANドライバ

      T2EXリファレンス実装の LAN ドライバをベースに、LAN9221 用に単純移植を行っ
      ている。

      具体的には、以下の点について T2EX リファレンス実装に対する変更が行われて
      いる。

        - デバイス構成情報 (${BD}/config\src_t2ex\sysdepend\asp_leon5/devconf.c)
                IOベースアドレスとIRQ番号を変更。


5.2 同時にオープン可能なソケットの最大数

      同時にオープン可能なソケットの最大数はシステム構成情報の SoMaxSocket で設
      定できる。この数は、so_socket() で生成されるソケットと so_accept() により
      生成されるソケットの合計数である。

      1 つのソケットの生成に必要なカーネルオブジェクトは、「5.7 カーネルオブジェ
      クト」を参照すること。

5.3 接続可能なデバイスドライバの最大数

      so_ifattach() でネットワーク通信マネージャに接続可能なデバイスドライバの
      数には制限がある。接続可能なデバイスドライバの最大数は以下のヘッダーファ
      イルの TKN_NIFDEV_MAX で定義されている。

        ${BD}/t2ex/network/net/src/netmain/tkn_init.h

        #define TKN_NIFDEV_MAX   3

5.4 LANドライバに登録されるバッファ

  (1) 登録されるバッファ数

      so_ifattach() でデバイスドライバを接続すると、受信に必要なバッファをその
      デバイスドライバに登録する。デバイスドライバに登録される受信バッファの個
      数はシステム構成情報の SoDrvRxBufNum で設定する。

  (2) バッファサイズ

      デバイスドライバに登録されるバッファサイズは、イーサネットの最大フレーム
      サイズである 1520 バイトである。この値は以下のヘッダーファイルの
      TKN_RXBUF_SIZE で定義されている。

        ${BD}/t2ex/network/net/src/netmain/if_tkn.h

        #define TKN_RXBUF_SIZE   1520

5.5 ソケットの送受信キューのバッファサイズ

      ソケットの送受信キューのバッファサイズに関連するシステム構成情報のデフォ
      ルト値は以下の通りである。
      
      --------------------------------------
        システム構成情報  サイズ(バイト数)
      ======================================
        SoTcpTxBufSz          32,768
        SoTcpRxBufSz          32,768
        SoUdpTxBufSz           9,216
        SoUdpRxBufSz          41,600 
        SoRawIPTxBufSz         8,192 
        SoRawIPRxBufSz         8,192 
        SoRawTxBufSz           8,192
        SoRawRxBufSz           8,192
      --------------------------------------

      TCP のフロー制御の最大ウィンドウサイズは、送信キューまたは受信キューのバッ
      ファサイズに依存する。システム構成情報の SoTcpDoAutoTx, SoTcpDoAutoRx に
      1 を設定すると、送信キューまたは受信キューのバッファサイズは通信相手のウィ
      ンドウサイズに合わせて動的に変更される(自動リサイズ)。これらのシステム構
      成情報のデフォルト値は 0 である。

      自動リサイズに関連するシステム構成情報のデフォルト値は以下の通りである。

      --------------------------------------
        システム構成情報  サイズ(バイト数)
      ======================================
        SoTcpIncAutoTx        16,384
        SoTcpMaxAutoTx       262,144
        SoTcpIncAutoRx        16,384
        SoTcpMaxAutoRx       262,144
      --------------------------------------

5.6 動的なメモリ確保への変更

      移植元となったソースコードにおいてスタック上に数KBのバッファを確保してい
      たものがあった。元の実装では組込み機器用として適当ではないので、malloc()
      等で動的に確保するように改良した。

      ---------------------------------------------------------------
        関数名               ファイルパス
      ===============================================================
        res_queryN()         net/src_bsdlib/libc/net/getaddrinfo.c
        getanswer()          net/src_bsdlib/libc/net/getaddrinfo.c
        _gethtent()          net/src_bsdlib/libc/net/getaddrinfo.c
        res_querydomainN()   net/src_bsdlib/libc/net/getaddrinfo.c
        getanswer()          net/src_bsdlib/libc/net/gethnamaddr.c
        res_nquery()         net/src_bsdlib/libc/resolv/res_query.c
        res_nquerydomain()   net/src_bsdlib/libc/resolv/res_query.c
        res_nameinquery()    net/src_bsdlib/libc/resolv/res_send.c
        res_queriesmatch()   net/src_bsdlib/libc/resolv/res_send.c
      ---------------------------------------------------------------
          (*) ファイルパスは「${BD}/t2ex/network/」を省略している。

      動的に確保されるバッファのサイズは次のヘッダーファイルで定義されている。

        ${BD}/t2ex/network/net/src_bsdlib/libc/include/port_before.h

        #define T2EX_NS_MAXPACKET   (64*1024)
        #define T2EX_NS_HOSTBUFSZ   (8*1024)
        #define T2EX_NS_MAXDNAME    (1025)
        #define T2EX_NS_THRESHOLD   (1024)

      T2EX_NS_MAXPACKET
        DNS パケットの送受信用バッファのサイズ
        - res_queryN() [getaddrinfo.c]

      T2EX_NS_HOSTBUFSZ
        DNS パケットの解析用バッファのサイズ
        - getanswer() [getaddrinfo.c]
        - _gethtent() [getaddrinfo.c]

      T2EX_NS_MAXDNAME
        DNS ホスト名の展開または圧縮に用いられるバッファのサイズ
        - getanswer() [getaddrinfo.c]
        - res_querydomainN() [getaddrinfo.c]
        - getanswer() [gethnamaddr.c]
        - res_nquerydomain() [res_query.c]
        - res_nameinquery() [res_send.c]
        - res_queriesmatch() [res_send.c]

      T2EX_NS_THRESHOLD
        DNS のクエリパケット用バッファのサイズ
        - res_nquery() [res_query.c]

5.7 カーネルオブジェクト

  (1) ネットワーク通信機能初期化時に消費されるカーネルオブジェクト

      so_main() によりネットワーク通信機能を初期化すると以下の数のカーネルオブ
      ジェクトが消費される。

        ----------------------
            種別         個数
        ======================
          タスク           6
          セマフォ         5
          イベントフラグ   5
          ミューテックス   1
          ランデブ         1
          周期ハンドラ     1
          サブシステム     1
        ----------------------

  (2) デバイスドライバ接続時に消費されるカーネルオブジェクト

      so_ifattach() によりデバイスドライバを接続すると以下の数のカーネルオブジェ
      クトが消費される。

        --------------------------
            種別             個数
        ==========================
          タスク               1
          メッセージバッファ   1
        --------------------------

  (3) ソケットの生成により消費されるカーネルオブジェクト

      so_socket() または so_accept() によりソケットを 1 つ生成すると以下の数の
      カーネルオブジェクトが消費される。

        -------------------------------------------
            種別                    個数
        ===========================================
          イベントフラグ   ceil(2/32) + ceil(4/32)
        -------------------------------------------

      表中の「2/32」「4/32」は、それぞれイベントフラグの「2 ビット分」「4 ビッ
      ト分」を意味している。また、ceil() は天井関数であり、ceil(x) は実数 x に
      対して最小の整数を表す。

      また、so_socket() と so_accept() により生成されるソケットの合計数が N 個
      の場合、以下の個数のイベントフラグが必要になる。

        ceil((2*N)/32) + ceil((4*N)/32)

      (計算例) N=9 の場合
          ceil((2*9)/32) + ceil((4*9)/32)
        = ceil(18/32) + ceil(36/32)
        = 1 + 2
        = 3

  (4) ネットワーク通信機能で必要となるカーネルオブジェクト

      接続されるデバイスドライバの最大数を D, 生成されるソケットの最大数を S
      (これはシステム構成情報の SoMaxSocket に等しい) とおくと、下表のようにま
      とめられる。

        --------------------------------------------------------------------
            種別               個数
        ====================================================================
          タスク               6 + D
          セマフォ             5
          イベントフラグ       1 + ceil((57 + 2*S)/32) + ceil((37 + 4*S)/32)
          ミューテックス       1
          メッセージバッファ   D
          ランデブ             1
          周期ハンドラ         1
          サブシステム         1
        --------------------------------------------------------------------

      イベントフラグの天井関数の中に表れる定数項(57と37)は、so_main() による初
      期化時に消費されるイベントフラグのビット数である。

5.8 実行環境の設定

      ASP-LEON5 で動作を確認する場合、特に設定する項目はない。LAN ケーブルが本体
      に接続されていることを確認してプログラムを実行する。


5.9 ネットワークの動作確認

      ここでは、サンプルプログラムを用いてネットワークの動作を確認するまでの手
      順を説明する。

  (1) ソースコードの修正

      ${BD}/usermain_t2ex/appl_main.c の appl_main() を修正する。以下の
      関数呼び出しで必要とされるヘッダーファイル net_test.h を次のようにインク
      ルードする。

        #include "network_sample/net_test.h"

      appl_main() に以下の関数呼び出しを追加する。

        net_test();

      net_test() 関数は、DHCP を用いてアドレスを設定することを想定している。静
      的にアドレスを設定する場合は、アドレス設定関連のマクロを設定し、以下のファ
      イルの net_test() 内のnet_conf() へ渡すパラメータを修正する。詳細は
      「5.11 ネットワークユーティリティ (1) ネットワークインタフェースの設定」
      を参照すること。

        ${BD}/kernel/usermain_t2ex/network_sample/net_test.c

  (2) ネットワークのサンプルプログラムのビルド方法

      サンプルプログラムについてもビルド済であるため、プロジェクトの変更などの
      必要はない。

  (3) ネットワークのサンプルプログラムの動作確認

      実機上で実行する場合、通常と同様の手順でプログラムを転送して実行する。

      ネットワークインタフェースの設定結果とサンプルプログラムの動作結果が出力
      される。

5.10 ネットワーク通信機能を利用するプログラム開発

      ネットワーク通信機能が提供するソケットを用いて通信するためには、ネットワー
      ク通信機能を初期化してからネットワークインタフェースを適切に設定する必要
      がある。

  (1) ネットワーク通信機能の初期化

      so_main(0, NULL);

  (2) ネットワークインタフェースの設定

      サンプルプログラムの net_test() の中で呼ばれている net_conf() を呼ぶこと
      により、ネットワークインタフェース Neta に対して必要なアドレス設定を行う
      ことができる。

      net_conf() およびその他のネットワークユーティリティについては「5.11 ネッ
      トワークユーティリティ」を参照すること。

      ネットワークインタフェースの設定完了後は、ソケットを用いた通信を行える。

5.11 ネットワークユーティリティ

      ネットワークユーティリティのサンプルプログラムを提供する。

      ネットワークユーティリティをビルドする場合は、以下の様に network_sample を
      ビルド対象に追加してからビルドを実行する。

        Project Explorer の usermain_t2ex を展開し、network_sample を右クリックし
        て、コンテキストメニューの Resource configurations の 
        Exclude from build...を選択する。
        ダイアログに表示されたビルドコンフィギュレーションのチェックを全て外し、
        OK を押す。

  (1) ネットワークインタフェースの設定

      #include "network_sample/util.h"
      int net_conf(int emu, int dhcp);

      パラメータ

        int     emu     エミュレータかどうか
        int     dhcp    アドレスの設定方法

      説明

        ネットワークインタフェース Neta を設定する。so_main() でネットワーク通
        信機能を初期化してから呼ぶ。

        - ループバックデバイスの設定
        - ネットワークインタフェース Neta の設定
        - デフォルトゲートウェイの設定
        - DNS関連の設定
        - ホスト名テーブルの設定

        net_conf() は、T2EX API コールに加えて 5.11(3) 以降のネットワークユーティ
        リティ関数を内部的に利用している。

        実機で実行する場合は emu に 0 を指定する。エミュレータで実行する場合は
        emu に 1 を指定する。emu 用に以下の定数が定義されている。

          #define NET_CONF_MACHINE  (0)
          #define NET_CONF_EMULATOR (1)

        DHCP でアドレスを設定する場合は dhcp に 1 を指定する。静的にアドレスを
        設定する場合は dhcp に 0 を指定する。dhcp 用に以下の定数が定義されてい
        る。

          #define NET_CONF_STATIC (0)
          #define NET_CONF_DHCP   (1)

        なお、静的にアドレスを設定する場合、以下のファイルの先頭に定義されてい
        るマクロを直接編集する。

          ${BD}/kernel/usermain_t2ex/network_sample/net_conf.c

          - IPADDR:     IP アドレス
          - NETMASK:    ネットマスク
          - GATEWAY:    ゲートウェイ
          - DNSSERVER1: 1つ目のDNSサーバ (不要の場合はコメントアウトする)
          - DNSSERVER2: 2つ目のDNSサーバ (不要の場合はコメントアウトする)
          - DNSSERVER3: 3つ目のDNSサーバ (不要の場合はコメントアウトする)
          - DNSDOMAIN:  DNSの検索ドメイン (不要の場合はコメントアウトする)

      使用例 (実機で DHCP を使用する場合)

        net_conf(NET_CONF_MACHINE, NET_CONF_DHCP);

      使用例 (エミュレータで静的にアドレスを設定する場合)

        net_conf(NET_CONF_EMULATOR, NET_CONF_STATIC);
        (*) net_conf.c の上記マクロを適切に設定しておくこと

  (2) ネットワークインタフェースの情報表示

      #include "network_sample/util.h"
      void net_show(void);

      解説

        ネットワークインタフェースに関連する以下の情報を表示する。
  
         - ネットワークインタフェースに設定されたアドレス情報
         - DNS関連の設定
         - ホスト名テーブル
         - 経路情報

  (3) ネットワークインタフェースのアドレス設定

      #include "network_sample/util.h"
      void set_ifaddr(const char* ifname, in_addr_t addr, in_addr_t mask)

      パラメータ
      
        const char*     ifname          インタフェース名
        in_addr_t       addr            アドレス
        in_addr_t       mask            ネットワークマスク

      解説

        ifname で指定されたインタフェースにアドレス addr とネットワークマスク
        mask を設定する。

  (4) ネットワークインタフェースの起動/停止

      #include "network_sample/util.h"
      int if_updown(const char* ifname, int is_up)

      パラメータ

        const char*     ifname          インタフェース名
        int             is_up           インタフェースの起動/停止

      解説

        ifname で指定されたインタフェースを起動または停止する。

        インタフェースを起動する場合は is_up に 0 以外の値を指定する。インタ
        フェースを停止する場合は is_up に 0 を指定する。

  (5) 経路の追加

      #include "network_sample/route.h"
      void route_add(in_addr_t dest, in_addr_t gate, in_addr_t mask, 
                     int index, int direct);

      パラメータ

        in_addr_t       dest    宛先アドレス
        in_addr_t       gate    ゲートウェイアドレス
        in_addr_t       mask    ネットワークマスク
        int             index   インタフェースのインデックス
        int             direct  宛先アドレスに直接到達可能かどうかを示す値

      解説

        宛先アドレス dest、ゲートウェイアドレス gate、ネットワークマスク mask
        の経路情報をルーティングテーブルに追加する。

        index にはインタフェースのインデックスを指定する。この値は、
        so_ifnametoindex() などで取得することができる。

        宛先アドレスに直接接続されている場合は direct に 0 以外の値を設定し、そ
        れ以外の場合は direct に 0 を設定する。direct に 0 を設定すると経路情報
        のフラグに RTF_GATEWAY を設定し、direct に 0 以外の値を設定すると経路情
        報のフラグに RTF_GATEWAY を設定せずに RTF_HOST を設定する。

        デフォルトゲートウェイを指定する場合は dest, mask に INADDR_ANY を指定
        する。

  (6) 経路の削除

      #include "network_sample/route.h"
      void route_delete(in_addr_t dest, in_addr_t mask, int index, int direct);

      パラメータ

        in_addr_t       dest    宛先アドレス
        in_addr_t       gate    ゲートウェイアドレス
        in_addr_t       mask    ネットワークマスク

      解説

        宛先アドレス dest、ゲートウェイアドレス gate、ネットワークマスク mask
        の経路情報をルーティングテーブルから削除する。

        デフォルトゲートウェイを指定する場合は dest, mask に INADDR_ANY を指定
        する。

  (7) 経路の一覧表示

      #include "network_sample/route.h"
      void dump_rtlist(void);

      解説

        ルーティングテーブルのエントリを標準出力に表示する。

  (8) ホスト名テーブルのエントリ追加

      #include "network_sample/util.h"
      void add_hosttable(const char* hostname, in_addr_t addr);

      パラメータ

        const char*     hostname        ホスト名
        in_addr_t       addr            アドレス

      解説

        ホスト名 hostname にアドレス addr を割り当てるエントリをホスト名テーブ
        ルに追加する。

  (9) DHCP によるアドレス設定

      #include "network_sample/dhclient.h"
      int dhclient(const char* ifname);

      パラメータ

        const char*     ifname          インタフェース名

      解説

        ifname で指定されたインタフェースに対して、DHCP を用いて以下の設定を行
        う。

        - ネットワークインタフェースのアドレス設定
        - デフォルトゲートウェイの設定
        - DNS関連の設定

5.12 実装上の制限事項

      以下の制限事項がある。

      - 元のソースコードではIPヘッダのIDフィールドにランダムな値を設定する機能
        があるが、本実装ではメモリ使用量を削減するためにこの機能を提供しない。


------------------------------------------------------------------------------
6. カレンダ機能
------------------------------------------------------------------------------

      T2EX のリファレンス実装からの変更なし。

      T2EX のリファレンス実装と同様に以下の制限事項がある。

      - time_t 型の引数または戻り値を持つAPIコールにおいて、SYSTIM, SYSTIM_U で
        表現できない範囲の時刻を指定した場合、エラーとなる。
        具体的には、1985年1月1日00:00:00以前の時刻を指定した場合、エラーとなる。

      - dt_strptime() において %U, %W を指定した場合、文字列中の値は無視され
        tm に格納されない。


------------------------------------------------------------------------------
7. プログラムロード機能
------------------------------------------------------------------------------

      T2EXのプログラムロード機能には非対応である。
      プログラムロード機能の API コールを呼び出した場合は、E_NOSPT を返す。


------------------------------------------------------------------------------
8. 標準C互換ライブラリ
------------------------------------------------------------------------------

      標準C互換ライブラリは ${BD}/t2ex/lib/libtk の一部と、${BD}/t2ex/lib/libc
      で実装されている。

      但し本実装において、標準C互換ライブラリは未使用のためビルド対象から除外す
      る。


------------------------------------------------------------------------------
------------------------------------------------------------------------------
