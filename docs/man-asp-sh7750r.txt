/*
 *----------------------------------------------------------------------
 *    UCT T-Kernel 2.0 DevKit tuned for ASP-SH7750R
 *
 *    Copyright (c) 2013 UC Technology. All Rights Reserved.
 *----------------------------------------------------------------------
 *
 *    Version:   1.00.00
 *    Released by UC Technology (http://www.uctec.com/) at 2013/01/31.
 *
 *----------------------------------------------------------------------
 */

==============================================================================
                T-Kernel 2.0 ( ASP-SH7750R ) 取扱説明書
==============================================================================
                                                               Version 1.00.00

------------------------------------------------------------------------------
1. はじめに
------------------------------------------------------------------------------

本書は、NE-87796 ボード (CPU SH7750R コア ASIC) (以降、ASP-SH7750R と記述)に
対応した T-Kernel 2.0 システムの取り扱いに関する説明書です。

本 T-Kernel 2.0 システムは、ルネサステクノロジー社製の SH 用統合開発環境 HEW
(High-performance Embedded Workshop) の上に構築されています。


------------------------------------------------------------------------------
2. リリース内容
------------------------------------------------------------------------------

    ReadMe.txt             取扱説明書 (本書)
    impl-serial.txt        シリアルドライバ実装仕様書

    HEW_ASP-SH7750R.zip    HEW プロジェクト一式


------------------------------------------------------------------------------
3. ビルド方法
------------------------------------------------------------------------------

HEW プロジェクト一式のアーカイブファイルである HEW_ASP_SH7750R.zip を適当な
ディレクトリ(標準では、C:\WorkSpace ディレクトリ)上で展開してください。

展開した結果の以下のファイルを HEW のワークスペースとして開きます。

    ASP_SH7750R\ASP_SH7750R.hws


ワークスペース内には、以下の 13 個のプロジェクトが入っています。


    プロジェクト名    プロジェクトディレクトリ    出力ファイル
    -------------------------------------------------------------
      libstr        lib\libstr\build_hew           libstr.lib
      libsvc        lib\libsvc\build_hew           libsvc.lib
      libtk         lib\libtk\build_hew            libtk.lib
      libtm         lib\libtm\build_hew            libtm.lib
      libdrv        lib\libdrv\build_hew           libdrv.lib
      drv           drv\build_hew                  drv.lib
      sysinit       kernel\sysinit\build_hew       sysinit.lib
      sysmgr        kernel\sysmgr\build_hew        sysmgr.lib
      tkernel       kernel\tkernel\build_hew       tkernel.lib
      tkse          tkse\build_hew                 tkse.lib
    -------------------------------------------------------------
      config        config\build_hew               config.abs
      monitor       monitor\build_hew              monitor.abs
      sysmain       kernel\sysmain\build_hew       sysmain.abs
    -------------------------------------------------------------

最初の 10 個のプロジェクトをビルドすると、結果として上記に示すライブラリファ
イル *.lib が生成されます。

残りの 3 個のプロジェクトをビルドすると、結果として上記に示す実行イメージの
オブジェクトファイル *.abs が生成されます。
これら 3 つのオブジェクトファイルは、実行のために、すべて、ターゲットボード
上のメモリに転送します。

sysmain プロジェクトは、他の 12 個のプロジェクトに依存する設定となっているた
め sysmain プロジェクトで「すべてビルドする」を行うと全プロジェクトのビルドを
一気に行うことができます。

sysmain プロジェクトのビルドでは、以下のシンボルの Duplicate symbol の Warning
が表示されますが、これは、HEW で生成/リンクされるラインタイムライブラリにこれ
らの関数が含まれてしまうためであり、無視して構いません。

      _malloc, _free, _memset, _memcmp, _memcpy, _memmove, _div


------------------------------------------------------------------------------
4. プロジェクトの設定
------------------------------------------------------------------------------

各プロジェクトで対象とするソースファイルは、以下の通りです。

    プロジェクト名    対象のソースファイル
    -------------------------------------------------------------
      libstr          lib\libstr\src\*.c
    -------------------------------------------------------------
      libsvc          lib\libsvc\src\sysdepend\sh7750r\*.S
    -------------------------------------------------------------
      libtk           lib\libtk\src\*.c
                      lib\libtk\src\sysdepend\asp_sh7750r\*.c,*.S
    -------------------------------------------------------------
      libtm           lib\libtm\src\*.c,*.S
    -------------------------------------------------------------
      libdrv          lib\libdrvif\src\*.c
    -------------------------------------------------------------
      drv             drv\asp_sh7750r\console\src\*.c
                      drv\asp_sh7750r\rs\src\*.c
    -------------------------------------------------------------
      sysinit         kernel\sysinit\src\*.c
                      kernel\sysdepend\device\sh7750r\cntwus.c
                      kernel\sysdepend\device\sh7750r\devinit.c
                      kernel\sysdepend\device\sh7750r\patch.c
    -------------------------------------------------------------
      sysmgr          kernel\sysmgr\src\*.c
                      kernel\extension\memory\nommu\*.c
                      kernel\sysdepend\cpu\sh7750r\cache.c
                      kernel\sysdepend\cpu\sh7750r\chkplv.c
                      kernel\sysdepend\device\sh7750r\space.c
                      kernel\sysdepend\device\sh7750r\tlb.S
    -------------------------------------------------------------
      tkernel         kernel\tkernel\src\*.c
                      kernel\sysdepend\cpu\sh7750r\cpu_calls.c
                      kernel\sysdepend\cpu\sh7750r\cpu_init.c
                      kernel\sysdepend\cpu\sh7750r\cpu_insn.c
                      kernel\sysdepend\cpu\sh7750r\cpu_status.c
                      kernel\sysdepend\cpu\sh7750r\cpu_support.S
                      kernel\sysdepend\cpu\sh7750r\cpu_task.c
                      kernel\sysdepend\device\sh7750r\tkdev_init.c
                      kernel\sysdepend\device\sh7750r\tkdev_timer.c
    -------------------------------------------------------------
      tkse            tkse\extension\coomon\src\*.c
    -------------------------------------------------------------
      config          config\src\sysdepend\asp_sh7750r\*.c
    -------------------------------------------------------------
      monitor         monitor\src\asp_sh7750r\*.c,*.S
    -------------------------------------------------------------
      sysmain         kernel\sysmain\src\*.c
                      kernel\tstdlib\*.c
                      kernel\sysdepend\device\sh7750r\dbsct.c
                      kernel\sysdepend\device\sh7750r\icrt0.S
                      kernel\usermain\usermain.c
                      kernel\usermain\command.c
                      kernel\usermain\ref_command.c
    -------------------------------------------------------------

各プロジェクトのビルドオプションで、注意すべき項目は以下の通りです。
特に記述されていない項目は、デフォールトのままで構いません。

    [コンパイラ]
        [ソース]
            <インクルードファイルディレクトリ>
                $(FILEDIR)
                $(WORKSPDIR)\include
                ... (その他必要なもの)

            <マクロ定義>
                _ASP_SH7750R_    1

        [オブジェクト]
            <出力ファイル形式>
                機械語プログラム(*.obj)
                [v]デバッグ情報出力

                ※ #pragma inline_asm を含むソースは、以下を指定してください。
                   アセンブリプログラム(*.src)

        [その他]
            <その他のオプション>
                [ ]MACレジスタを保証する        (デフォールトON)
                [ ]SSR/SPC退避・回復            (デフォールトON)
                [v]FPSCRレジスタの切り替え      (デフォールトOFF)

                ※ 上記の設定、「FPSCRレジスタの切り替え」のみ ON、他は全て
                    OFF、でないと正しく動作しませんので必ず設定してください。

    [アセンブラ]
        [ソース]
            <インクルードファイルディレクトリ>
                $(FILEDIR)
                $(WORKSPDIR)\include
                ... (その他必要なもの)

            <シンボル定義>
                _ASP_SH7750R_    1

            <オブジェクト>
                デバッグ情報出力あり

    [最適化リンカ]
        [入力]
            sysmain プロジェクトでは、以下のライブラリを指定してください。

                lib\libtm\build_hew\Debug\libtm.lib
                lib\libtk\build_hew\Debug\libtk.lib
                lib\libsvc\build_hew\Debug\libsvc.lib
                lib\libstr\build_hew\Debug\libstr.lib
                kernel\sysinit\build_hew\Debug\sysinit.lib
                kernel\sysmgr\build_hew\Debug\sysmgr.lib
                kernel\tkernel\build_hew\Debug\tkernel.lib
                drv\build_hew\Debug\drv.lib
                lib\libdrv\build_hew\Debug\libdrv.lib
                tkse\build_hew\Debug\tkse.lib

            他のプロジェクトでは、何も指定しません。

        [出力]
             sysmain, monitor, config プロジェクトでは以下を指定してください。

                Sタイプ(ELF/DWARFアブソリュート付き)
                        または、
                アブソリュート(ELF/DWARF)

             他のプロジェクトでは、以下を指定してください。

                システムライブラリ

        [セクション]
            sysmain, monitor, config プロジェクトでは、各セクションのリンク
            アドレスを指定してください。

                sysmain:
                        0x84002000   P_start, P, C, C$BSEC, C$DSEC, D, R, B
                monitor:
                        0x84000000   RESET, P, C, B
                config:
                        0x84001500   D_rominfo, D_SYSCONF, D_DEVCONF

            他のプロジェクトでは、何も指定しません。

    [標準ライブラリ]
        [モード]
            sysmain, monitor プロジェクトでは、以下を指定してください。この指
            定を行いませんと、最終的に必要なランタイムライブラリが、生成/リン
            クされません。

                標準ライブラリファイル作成(常に作成)

            他のプロジェクトでは、以下を指定してください。

                標準ライブラリファイル指定なし

        [その他]
            sysmain, monitor プロジェクトでは、以下を指定してください。

                [ ]SSR/SPC退避・回復
                [v]FPSCRレジスタの切り替え

            他のプロジェクトでは、何も指定しません。

    [CPU]
        SH-4, Big Endian, Mix, Zero を指定してください。

    [全般]
        [v] 依存関係検索エラーメッセージ抑止


------------------------------------------------------------------------------
5. 実行方法
------------------------------------------------------------------------------

ターゲットボードのシリアルポートを PC に接続して、PC 上でターミナルソフトを立
ち上げます。シリアルポートの設定は、以下の通りとしてください。

        通信速度    115200 bps
        データ長    8 bits
        パリティ    なし
        ストップ    1 bit
        フロー制御  なし

E10A JTAG デバッガをターゲットボードに接続して、ターゲットボードの電源を入れ、
HEW のデバッグメニューの接続を選択します。プロジェクト sysmain をアクティブプ
ロジェクトとしておいてください。

接続すると、デバッガのバッチコマンドが実行されて、ターゲットボードの SRAM がア
クセス可能になり、PC が 0x84000000 に設定されます。

     ※ バッチコマンドは、ワークスペース直下にある以下のファイルで、HEW から
        CPU リセットを行った場合にも実行するように設定してあります。

             ASP_SH7750R\startup.hdc

ダウンロードを選択すると、config.abs, monitor.abs, sysmain.abs の 3 つのファイ
ルが表示されますので、All Download を選択して、全部をロードしてください。

PC が 0x84000000 となっていることを確認して、実行すると、最初に T-Monitor が起
動したのち、T-Kernel が起動し、ターミナル上に以下のメッセージが表示されます。

      ** ASP-SH7750R - Monitor **

      T-Kernel 2.0 for ASP-SH7750R
      Push any key to shutdown the T-Kernel.

      ** ASP-SH7750R - Monitor **

      T-Kernel Version 2.01.00

      T-Kernel 2.0 for ASP-SH7750R
      ConsoleIO - OK
      RsDrv - OK
      T2 >> 

シリアルドライバ( ConsoleIO, RsDrv ) の起動後、簡単なコマンド入力のサンプルプ
ログラムが動作して、ターミナルからのコマンド入力待ちになります。

      T2 >> q

"q" を入力すると、コマンド入力のサンプルプログラムは終了します。

      Push any key to shutdown the T-Kernel.

ターミナルから何か入力すると、システムは終了します。

      << SYSTEM SHUTDOWN >>
      -- tm_exit() --

システムの終了では、T-Monitor の tm_exit() 関数を呼び出します。
tm_exit() 関数では、特に何もせずに内部で無限ループしているだけです。

コマンド入力のサンプルプログラムに関しては、以下のソースプログラムを参照してく
ださい。

      kernel\usrmain\command.c,  ref_command.c,  

kernel\usrmain\usermain.c にアプリケーションタスクを追加して、再ビルドして、ロ
ード/実行することで、アプリケーションを実行することができます。


------------------------------------------------------------------------------
6. システムの構成
------------------------------------------------------------------------------

6.1 概要

    CPU は、SH7750R コアの ASIC で、Big エンディアンで、60 MHz で動作します。
    周辺クロックは、30 MHz です。

    T-Kernel は、4 MB の SRAM 上で動作します。

    MMU はメモリ保護機能のために使用します。(8.メモリ保護機能を参照)

6.2 メモリマップ

    SRAM 上のメモリマップは、以下の通りです。アドレス 0x8******* の P1 空間で
    動作します。


     0x84000000 +-------------------------------+ <--- ベクトルベース (VBR)
                |     T-Monitor コード          |
                |    コード/データ/スタック     | <--- [ monitor.abs ]
                |       (例外エントリ)          |
     0x84001000 +-------------------------------+
                |    例外/割込みベクタテーブル  |
                |    特殊ハンドラアドレス       |
     0x84001208 +-------------------------------+
                |      システム共有情報         |
     0x84001280 +-------------------------------+
                |      例外/割込スタック        |
     0x84001500 +-------------------------------+
                |           ROM 情報            |
                |      システム構成情報         | <--- [ config.abs ]
                |     (SYSCONF / DEVCONF)       |
     0x84002000 +-------------------------------+
                |                               |
                |  T-Kernel + アプリケーション  |
                |        コード/データ          | <--- [ sysmain.abs ]
                |                               |
                +- - - - - - - - - - - - - - - -+
                |                               |
                |      動的メモリ領域           |
                |                               |
     0x84400000 +-------------------------------+


6.3 T-Monitor

    T-Monitor は、必要最小限のブートおよび例外エントリの機能のみの実装ですので
    デバッグ機能は持っていません。

    システムコールとしては、以下のシリアル入出力のみに対応しています。シリアル
    入出力は割り込み禁止状態で実行されます。

        tm_getchar( INT wait )
        tm_putchar( INT c )
        tm_getline( UB *buff )
        tm_putstring( const UB *buff )
        tm_printf( const char *format, ... )  (ライブラリ)

    また、以下のシステムコールは、T-Monitor 内で無限ループに入りますので、戻っ
    てきません。

        tm_monitor( void )
        tm_exit( INT mode )

    なお、シリアルポートの通信速度は、monitor\src\asp_sh7750r\monitor.c 内の
    以下の定義を変更して、再ビルドすることにより変更可能です。

        #define BAUD_RATE    115200

6.4 T-Kernel

    T-Engine フォーラムから公開されている T-Kernel(1) の SH7751 版の実装仕様を
    もとにして、T-Kernel 2.01.03 を移植しています。ただし、システムタイマは、
    TMU4 ではなく、TMU0 を使用しています。

    T-Kernel 2.0 で追加された、物理タイマ機能には対応していますが、メモリキャ
    ッシュ制御機能、論理アドレス空間管理の一部の機能には対応していません。


------------------------------------------------------------------------------
7. T-Kernel 機能制限
------------------------------------------------------------------------------

T-Kernel のシステムコールのうち、実際には使用しないシステムコールの処理を切り
離して、全体のコードサイズを小さくすることができます。

このためには、以下の手順が必要になります。

  (1) 使用するシステムコールを以下の設定ファイルで設定してください。

      システムコール単位での指定
          使用しないシステムコールに対応する USE_FUNC_xxxx の定義を削除して
          ください。

                confog\tk_config_func.h
                config\tk_config_func.inc

      機能単位での指定
          使用しない機能に対応する NUM_xxxx の定義を削除してください。
          デバッグ機能を使用しない場合は、USE_DBGSPT を 0 に設定してください。

                kernel\tkernel\src\config.h
                kernel\tkernel\src\config.inc

  (2) 全プロジェクトのクリーン、その後、全ビルドの操作を行ってください。


本リリースに含まれている HEW プロジェクトは、必要な機能のみに限定した構成にな
っています。

  ・ 必要な機能の設定に関しては、(1)の設定ファイルを参照してください。

  ・ (1)の設定ファイル名に .org を付加したファイル名のファイルは、フル構成の
     場合の設定ファイルです。（kernel\tkernel\src\config.inc.org など)

  ・ 削除したシステムコールを実行すると、E_RSFN のエラーとなります。
     (ライブラリとして実装されている一部の関数はリンクエラーとなります。)


使用しないシステムコールを完全に削除して、使用した場合にリンクエラーとするため
には、上記 (1)の設定を行った状態で、さらに以下の手順を行ってください。
この場合、使用するシステムコールの機能番号は詰めて割り当てられるため、システム
コールの分岐用テーブルのサイズが小さくなります。

  (A) 以下のヘッダファイル内の使用しないシステムコールの宣言を削除します。

        include\tk\syscall.h
        include\tk\devmgr.h
	include\sys\segment.h

  (B) cygwin または linux 環境で、以下の操作を行います。

        $ cd lib/libsvc/build_src
        $ make clean_source
        $ make source

     以下のファイルが生成されます。
         lib/libsvc/src/sysdepend/include/*.h, *.inc
         lib/libsvc/src/sysdepend/sh7750r/*.S

  (C) 生成した lib/libsvc/src/sysdepend/include/*.h, *.inc をすべて、
      include/sys/svc/include/sys/svc/*.h, *.inc にコピーします。

        $ cd lib/libsvc/src/sysdepend/include
        $ cp * ../../../../../include/sys/svc/include/sys/svc/


------------------------------------------------------------------------------
8. メモリ保護機能
------------------------------------------------------------------------------

本システムでは、SH7750R の MMU を使用したメモリ保護機能を実現しています。

メモリ保護機能の目的は、アプリケーションプログラムから、システムで使用するメモ
リ領域を保護することにあります。

システムを構成するプログラムは以下の 2 種類に分けられます。

 (1) システムプログラム
      T-Kernel 本体、デバイスドライバなどで、CPU の特権モードで動作します。
      アドレス空間の P1 領域 (0x80000000～)で動作し、MMU を経由せずに実行され
      ますので、MMU によるオーバーヘッドは全く発生しません。
      システムプログラムのタスクを生成するには、tk_cre_tsk() で、TA_RGN0 また
      は、TA_RNG1 を指定します。

 (2) ユーザプログラム
      アプリケーションタスクなどで、CPU のユーザモード (T-Kernel の保護レベル
      2) で動作します。
      アドレス空間の U0 領域 (0x00000000～)で動作し、MMU を経由して実行されま
      すので、アドレス変換のためのオーバーヘッドや TLB ミス例外処理のオーバー
      ヘッドがわずかですが発生します。
      ユーザプログラムからは、システムプログラムのある P1 領域や I/O 領域のア
      クセスはできません。
      ユーザプログラムのタスクを生成するには、tk_cre_tsk() で、TA_RGN2 を指定
      します。

システムプログラムとユーザプログラムは、それぞれ、P1 領域 と U0 領域のアドレス
を指定して別々にリンクする必要があります。

システムプログラムとユーザプログラムは独立した別のメモリ領域を使用し、動的に獲
得得するメモリ領域のみが共有される構成となります。

以下にシステムプログラムとユーザプログラムで使用するメモリ構成を示します。
P1 領域 と U0 領域は、完全に一対一に対応し、同じアドレスを使用します。


              システム (P1 領域)                     ユーザ (U0 領域)
 0x84000000 +--------------------+     0x04000000 +--------------------+
            |                    |                :                    :
            | システムプログラム |                :                    :
            |                    |                :   (アクセス不可)   :
            |  コード/データ領域 |                :                    :
            |                    |                :                    :
            |                    |                :                    :
            +--------------------+- - - - - - - - :--------------------:
            |                    |                :                    :
            |   動的メモリ領域   |                :   (アクセス不可)   :
            |                    |                :                    :
            |- - - - - - - - - - |- - - - - - - - +--------------------+
            |   [TA_RNG2指定]    |  <=== マップ   |    動的メモリ      |
            |- - - - - - - - - - |- - - - - - - - +--------------------+
            |                    |                :    (アクセス不可)  :
            |                    |                :                    :
       (A1) +--------------------+- - - - - - - - :--------------------:
            :                    :                :                    :
            :--------------------:- - - - - - - - +--------------------+ (A2)
            :                    :                |  ユーザプログラム  |
            :                    :  <=== マップ   |                    |
            :                    :                |     コード領域     |
            :--------------------:- - - - - - - - +--------------------+ (A3)
            :                    :                :   (アクセス不可)   :
            :--------------------:- - - - - - - - +--------------------+ (A4)
            :                    :                |  ユーザプログラム  |
            :                    :  <=== マップ   |                    |
            :                    :                |     データ領域     |
            :                    :                |                    |
            :--------------------:- - - - - - - - +--------------------+ (A5)
            :                    :                :   (アクセス不可)   :
 0x84400000 +--------------------+     0x04400000 +--------------------+


システムプログラムとユーザプログラムがそれぞれ使用するメモリ領域は、ROM 情報
(Rominfo) に設定する必要があります。

        (A1) RomInfo.userarea   (P1 領域のアドレスを指定)
        (A2) Rominfo.s_usr_code (U0 または P1 領域のアドレスを指定)
        (A3) Rominfo.e_usr_code (U0 または P1 領域のアドレスを指定)
        (A4) Rominfo.s_usr_data (U0 または P1 領域のアドレスを指定)
        (A5) Rominfo.e_usr_data (U0 または P1 領域のアドレスを指定)
        ※ 通常は、(A1) == (A2)、(A３) == (A４) とします。

ユーザプログラムのコード領域とデータ領域は、T-Kernel の起動処理で有効となりま
す。また、TA_RNG2 を指定して獲得した動的メモリ領域は、獲得した時点で有効となり
解放すると無効になります。

ユーザプログラムのイメージは U0 領域のアドレスを指定してリンクしますが、U0 領域
は、T-Kernel 起動後に初めて有効となるため、起動前にはロードできません。そのため
ロードするアドレスのオフセットに 0x80000000 を指定して、対応する P1 領域にロー
ドします。

ユーザプログラムからは、以下のメモリ領域のみアクセス可能となります。

       ユーザプログラムのコード領域 : 読込み(実行)のみ可 
       ユーザプログラムのデータ領域 : 読込み(実行)/書込み可
       TA_RNG2指定の動的メモリ領域  : 読込み(実行)/書込み可
       上記以外の領域               : アクセス不可

メモリアクセス違反をするとメモリ保護例外が発生し、例外ハンドラが登録されていれ
ば、登録された例外ハンドラが起動します。登録されていない場合は、T-Monitor 内の
デフォールトハンドラが実行され、発生した例外の情報をコンソールに出力して、シス
テムは停止します。

システムプログラムからは、P1 領域の全体、および U0 領域でユーザプログラムがア
クセス可能な領域をアクセスすることができます。U0 領域でユーザプログラムがアク
セス不可の領域をアクセスするとメモリ保護例外が発生します。

動的メモリ領域の確保に関しての動作は以下のようになります。

  tk_cre_mpf(), tk_cre_mpl()，tk_get_smb():
        attr に TA_RNG0 または TA_RNG1 を指定した場合は、獲得したメモリは、P1
        領域に割り当てられ、ユーザプログラムからはアクセス不可となります。
        attr に TA_RNG2 または TA_RNG3 を指定した場合は、獲得したメモリは、U0
        領域に割り当てられ、ユーザプログラムからアクセス可能となります。

  Kmalloc(), Kcalloc(), Krealloc(), Kfree()
  Vmalloc(), Vcalloc(), Vrealloc(), Vfree()
        獲得したメモリは、P1 領域に割り当てられ、ユーザプログラムからアクセス
        不可となります。(TA_RNG1 指定相当)

  Smalloc(), Scalloc(), Srealloc(), Sfree()
        獲得したメモリは、U0 領域に割り当てられ、ユーザプログラムからアクセス
        可能となります。(TA_RNG2 指定相当)

  malloc(), calloc(), realloc(), free()
        Smalloc(), Scalloc(), Srealloc(), Sfree() と同じです。

また、ユーザプログラムからは、割込みの禁止/許可 (DI, EI)が利用できないため、高
速排他制御用の CreateMLock(), DeleteMLock(), MLock(), MLockTmo(), MLockTmo_u(),
MUnlock() の関数が利用できません。そのため、ユーザプログラムからは、同等の機能
を持つ CreateUMLock(), DeleteUMLock(), UMLock(), UMLockTmo(), UMLockTmo_u(), 
UMUnlock() を使用する必要があります。


メモリ保護機能は、以下の定義を 0 に変更することにより、削除して、MMU を使用し
ないようにすることが可能です。

   include\sys\sysdepend\asp_sh7750r\
        machine.h:
                #define USE_MEM_PROTECT         1
        machine.inc:
                USE_MEM_PROTECT:  .assigna      1

メモリ保護機能が入った状態で、ユーザプログラムを全く使用せず、システムプログラ
ムのみを動作させても問題はありません。その場合、MMU は有効となっていますが、シ
ステムプログラムは P1 領域で動作するため、MMU によるオーバーヘッドは全く発生し
ません。むしろ NULL ポインタなどの U0 領域へのアクセスによりメモリ保護例外が発
生するため、デバッグに有効となります。

